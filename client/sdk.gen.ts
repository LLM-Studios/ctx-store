// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { ListMessagesData, ListMessagesError, ListMessagesResponse, CreateMessagesData, CreateMessagesError, CreateMessagesResponse, GetMessageData, GetMessageError, GetMessageResponse, UpdateMessageData, UpdateMessageError, UpdateMessageResponse, DeleteMessageData, DeleteMessageError, DeleteMessageResponse, GetThreadData, GetThreadError, GetThreadResponse, UpdateThreadData, UpdateThreadError, UpdateThreadResponse, DeleteThreadData, DeleteThreadError, DeleteThreadResponse, ListThreadsData, ListThreadsError, ListThreadsResponse, CreateThreadData, CreateThreadError, CreateThreadResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * List messages in thread
 * Retrieves a paginated list of messages in a specific thread
 */
export const listMessages = <ThrowOnError extends boolean = false>(options: Options<ListMessagesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListMessagesResponse, ListMessagesError, ThrowOnError>({
        ...options,
        url: '/threads/{threadId}/messages/'
    });
};

/**
 * Create messages
 * Creates new messages in a specified thread with the provided content and metadata.
 */
export const createMessages = <ThrowOnError extends boolean = false>(options: Options<CreateMessagesData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateMessagesResponse, CreateMessagesError, ThrowOnError>({
        ...options,
        url: '/threads/{threadId}/messages/'
    });
};

/**
 * Get a specific message
 * Retrieves a specific message from a thread by its ID. Returns a 404 error if the message is not found.
 */
export const getMessage = <ThrowOnError extends boolean = false>(options: Options<GetMessageData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMessageResponse, GetMessageError, ThrowOnError>({
        ...options,
        url: '/threads/{threadId}/messages/{messageId}'
    });
};

/**
 * Update a message
 * Updates the content and/or metadata of an existing message. Only the provided fields will be updated.
 */
export const updateMessage = <ThrowOnError extends boolean = false>(options: Options<UpdateMessageData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateMessageResponse, UpdateMessageError, ThrowOnError>({
        ...options,
        url: '/threads/{threadId}/messages/{messageId}'
    });
};

/**
 * Delete a message
 * Permanently deletes a message from a thread. This action cannot be undone.
 */
export const deleteMessage = <ThrowOnError extends boolean = false>(options: Options<DeleteMessageData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteMessageResponse, DeleteMessageError, ThrowOnError>({
        ...options,
        url: '/threads/{threadId}/messages/{messageId}'
    });
};

/**
 * Get a specific thread
 * Retrieves a thread by ID, optionally including its most recent messages.
 */
export const getThread = <ThrowOnError extends boolean = false>(options: Options<GetThreadData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetThreadResponse, GetThreadError, ThrowOnError>({
        ...options,
        url: '/threads/{threadId}/'
    });
};

/**
 * Update a thread
 * Updates a thread's title or metadata. Only the provided fields will be updated.
 */
export const updateThread = <ThrowOnError extends boolean = false>(options: Options<UpdateThreadData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateThreadResponse, UpdateThreadError, ThrowOnError>({
        ...options,
        url: '/threads/{threadId}/'
    });
};

/**
 * Delete a thread
 * Permanently deletes a thread and all its associated messages. This action cannot be undone.
 */
export const deleteThread = <ThrowOnError extends boolean = false>(options: Options<DeleteThreadData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteThreadResponse, DeleteThreadError, ThrowOnError>({
        ...options,
        url: '/threads/{threadId}/'
    });
};

/**
 * List all threads
 * Retrieves a paginated list of threads with their message counts.
 */
export const listThreads = <ThrowOnError extends boolean = false>(options?: Options<ListThreadsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListThreadsResponse, ListThreadsError, ThrowOnError>({
        ...options,
        url: '/threads/'
    });
};

/**
 * Create a thread
 * Creates a new thread with the provided title and metadata.
 */
export const createThread = <ThrowOnError extends boolean = false>(options: Options<CreateThreadData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateThreadResponse, CreateThreadError, ThrowOnError>({
        ...options,
        url: '/threads/'
    });
};